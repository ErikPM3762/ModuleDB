plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}
apply from: rootProject.file("buildSystem/libraries.gradle")
def libraries = ext.libraries
apply from: "$rootProject.projectDir/buildsystem/genericbuild.gradle"
def configuration = ext.configuration

android {
    namespace 'com.example.moduledb'
    compileSdk configuration.compileSdkVersion

    defaultConfig {
        minSdkVersion configuration.minSdkVersion
        targetSdkVersion configuration.targetSdkVersion
        versionCode configuration.versionCode
        versionName configuration.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
}


dependencies {
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }
    implementation "${libraries.junit_ktx}"
    implementation "${libraries.androidx_navigation}"
    implementation "${libraries.androidx_navigation_fragment}"
    implementation "${libraries.retrofit}"
    implementation "${libraries.retrofit_converter}"
    implementation "${libraries.okhttp3}"
    implementation "${libraries.lifecycle_library_core}"
    implementation "${libraries.google_hilt}"
    kapt "${libraries.hilt_kapt}"
    implementation "${libraries.squeareup_interceptor}"
    implementation "${libraries.coroutine_retrofit}"


    implementation "${libraries.roomRuntime}"
    implementation "${libraries.roomKtx}"
    kapt "${libraries.roomCompiler}"

    implementation "${libraries.roomRuntime}"
    annotationProcessor "${libraries.roomCompiler}"

}

ext.pomfileManualGenerator = {
    def root = asNode()
    def dependenciesNode = root.appendNode('dependencies')
    configurations.implementation.allDependencies
            .findAll {
                it.name != null && it.name != 'unspecified' && it.version != 'unspecified'
            }.each {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', it.group)
        dependencyNode.appendNode('artifactId', it.name)
        dependencyNode.appendNode('version', it.version)
        dependencyNode.appendNode('scope', 'compile')
        if (it.properties.excludeRules?.size() > 0) {
            def exclusionsNode = dependencyNode.appendNode('exclusions')
            it.properties.excludeRules.each { exclusion ->
                def exclusionNode = exclusionsNode.appendNode('exclusion')
                exclusion.group != null && exclusionNode.appendNode('groupId', exclusion.group)
                exclusionNode.appendNode('artifactId', exclusion.module != null ? exclusion.module : '*')
            }
        }
    }
    root.children().last()
}
project(':moduleDB') {
    version = "1.3.0"
    group = 'com.mobility.ado.qa'
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            gms(MavenPublication) {
                groupId = group
                artifactId = "${project.getName()}"
                version = version
                artifact("$buildDir/outputs/aar/${project.getName()}-${version}-gmsRelease.aar")
                pom.withXml pomfileManualGenerator
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.gms)
    }

}